{
    "id": "awk_sed_complex_transform_01",
    "title": "Awk & Sed: Filter and Reformat Logs",
    "description": "You are given a log file 'server.log'. First, use 'awk' to extract lines that contain the word \"ERROR\" and also have a date stamp starting with \"2023-10-22\". From these filtered lines, awk should output only the timestamp (1st field) and the message part (everything from the 4th field onwards). Then, pipe this output to 'sed' to reformat each line from '<timestamp> ERROR: <message>' to '<timestamp> :: <message>'.",
    "command_to_practice": "awk, sed",
    "example_solution": "awk '$0 ~ /ERROR/ && $1 ~ /^2023-10-22/ { msg=\"\"; for(i=4; i<=NF; i++) msg=(msg == \"\" ? \"\" : msg \" \") $i; print $1, msg }' server.log | sed -E 's/([^ ]+) ERROR: (.*)/\\1 :: \\2/'",
    "difficulty": "hard",
    "setup_files": [
        {
            "action": "create_file",
            "path": "server.log",
            "content": "2023-10-21 08:00:00 INFO: System startup\n2023-10-22 09:05:10 WARNING: Low disk space\n2023-10-22 09:15:30 ERROR: Database connection failed - timeout\n2023-10-22 10:00:00 INFO: User 'admin' logged in\n2023-10-23 11:00:00 ERROR: Service 'payments' unresponsive\n2023-10-22 14:22:05 ERROR: Null pointer exception in module UserAuth\n2023-10-22 15:00:00 INFO: Backup completed"
        }
    ],
    "input_details": {
        "prompt_for_command": "Enter awk and sed command: ",
        "working_directory": ".",
        "required_files_for_task": [ "server.log" ]
    },
    "evaluation": {
        "method": "exact_match",
        "expected_stdout": "2023-10-22T09:15:30 :: Database connection failed - timeout\n2023-10-22T14:22:05 :: Null pointer exception in module UserAuth",
        "expected_stderr": ""
    },
    "hints": [
        "In `awk`, you can combine conditions using `&&`. Use `$0 ~ /pattern/` to check if the whole line contains a pattern, and `$1 ~ /^2023-10-22/` to check if the first field starts with the date.",
        "To get fields from the 4th to the end in `awk`, you might need a loop: `for(i=4; i<=NF; i++) msg=(msg == \"\" ? \"\" : msg \" \") $i; print $1, msg`.",
        "Pipe the output of `awk` to `sed`.",
        "In `sed`, use a substitution command `s/old/new/`. Use `-E` for extended regex.",
        "Capture the timestamp and the message after \"ERROR: \" using parentheses in `sed`. Then use backreferences like `\\1` and `\\2` in the replacement part.",
        "The log timestamps have a space (e.g., '2023-10-22 09:15:30'), but the expected output has a 'T' ('2023-10-22T09:15:30'). Your `awk` and `sed` combination should handle this, or the example solution/evaluation needs adjustment if the 'T' is a strict requirement not achievable by only reformatting the awk output."
    ]
}